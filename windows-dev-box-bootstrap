Set-ExecutionPolicy Bypass -Scope Process -Force;
            Write-Verbose "Setting default region"
            if (-not $(Test-Path C:\Users\Administrator\.aws)) { mkdir C:\Users\Administrator\.aws }
            $configPath = Join-Path C:\Users\Administrator\.aws config
            Add-Content $configPath "[default]"
            Add-Content $configPath "region = ${AWS::Region}"
            Add-Content $configPath "output = json"
            Write-Verbose "Installing Choclatey"
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1"
            choco feature enable -n allowGlobalConfirmation
            Write-Verbose "Installing AWSCLI and AWS Powershell"
            choco install awscli awstools.powershell
            Write-Verbose "Installing Visual Studio 2019 Community"
            choco install visualstudio2019community
            Write-Verbose "Installing .NET Core support for Visual Studio 2019"
            choco install visualstudio2019-workload-netcoretools
            Write-Verbose "Downloading AWS Toolkit for Visual Studio"
            $vsixUri = 'https://amazonwebservices.gallerycdn.vsassets.io/extensions/amazonwebservices/awstoolkitforvisualstudio2017/1.15.2.1/1562099943790/AWSToolkitPackage.vsix'
            $installer = "${!env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\Common7\IDE\VSIXInstaller.exe"
            $devEnvVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo("${!env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.exe")
            $skuVersion = "{0}.{1}" -f $devEnvVersion.ProductMajorPart,$devEnvVersion.ProductMinorPart
            $download="$env:temp\AmazonWebServices.AWSToolkitforVisualStudio2017.vsix"
            Invoke-WebRequest -Uri "$vsixUri" -OutFile "$download"
            Write-Verbose "Installing AWS Toolkit for Visual Studio"
            Start-Process -Wait $installer -ArgumentList '/skuName:Community',"/skuVersion:$skuVersion",$download,'/q'
            # Create a Shortcut with Windows PowerShell
            $TargetFile = "${!env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.exe"
            $ShortcutFile = "$env:Public\Desktop\Visual Studio 2019.lnk"
            $WScriptShell = New-Object -ComObject WScript.Shell
            $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
            $Shortcut.TargetPath = $TargetFile
            $Shortcut.Description = "Visual Studio 2019 Community Edition"
            $Shortcut.Save()
            # Docker
            Write-Verbose "Installing Docker"
            choco install docker
            # AWS SAM
            Write-Verbose "Installing AWS SAM"
            mkdir c:\temp\
            Invoke-RestMethod https://github.com/awslabs/aws-sam-cli/releases/latest/download/AWS_SAM_CLI_64_PY3.msi -OutFile c:\temp\AWS_SAM_CLI_64_PY3.msi
            c:\temp\AWS_SAM_CLI_64_PY3.msi /quiet
            # VS Code
            Write-Verbose "Installing Visual Studio Code"
            choco install vscode
            Write-Verbose "Installing latest version of PowerShell Core"
            choco upgrade powershell-core
            Write-Verbose "Refreshing environment variables"
            refreshenv
            Write-Verbose "Downloading helper scripts"
            mkdir C:\AWS
            Read-S3Object -Region ${AWS::Region} -BucketName ${AWS::Region}.andyhoppatamazon.com -Key cloudformation/VSBox/UpdateProfileCredentials.ps1 -File C:\AWS\UpdateProfileCredentials.ps1
            Read-S3Object -Region ${AWS::Region} -BucketName ${AWS::Region}.andyhoppatamazon.com -Key cloudformation/VSBox/SetupPwsh.ps1 -File C:\AWS\SetupPwsh.ps1
            Write-Verbose "Installing AWS PowerShell Modules"
            pwsh -File C:\AWS\SetupPwsh.ps1
            Write-Verbose "Creating task to update credentials from EC2 profile"
            schtasks.exe /create /tn "Refresh AWS Credentials" /sc ONEVENT /ec "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational" /MO "*[System[Provider[@Name='Microsoft-Windows-TerminalServices-LocalSessionManager'] and EventID=25]]" /tr "powershell -WindowStyle Hidden -file C:\AWS\UpdateProfileCredentials.ps1"
            $task = Get-ScheduledTask -TaskPath "\" -TaskName "Refresh AWS Credentials"
            $triggers = $($( Get-ScheduledTask -TaskPath "\" -TaskName "Refresh AWS Credentials" ).Triggers + @( $(New-ScheduledTaskTrigger -AtLogOn)))
            Set-ScheduledTask -TaskPath "\" -TaskName "Refresh AWS Credentials" -Trigger $triggers
            Write-Verbose "Signaling completion to WaitHandle"
            Invoke-WebRequest -Method PUT -Body $( ConvertTo-Json @{ "Status" = "SUCCESS"; "UniqueId"=[System.Guid]::NewGuid() } ) -Uri "${ VSInstanceWaitHandle }"
